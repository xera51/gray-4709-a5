@startuml

package ucf.assignments #ADD {

    class InventoryManager {
        + {static} main(String[] args): void
        + start(Stage primaryStage): void
    }

    class InventoryManagerController {
        - stage : Stage
        - model : InventoryManagerModel
        - fileChooser : FileChooser
        - addFields : List<TextField>
        - saved : boolean

        - itemTable : TableView<Item>
        - serialNumberColumn : TableColumn<Item, String>
        - nameColumn : TableColumn<Item, String>
        - valueColumn : TableColumn<Item, BigDecimal>
        - nameFilter : TextField
        - serialNumberFilter : TextField
        - addButton : Button
        - serialNumberField : TextField
        - nameField : TextField
        - valueField : TextField
        - removeButton : Button

        + initialize(): void
        + InventoryManagerController(Stage stage): InventoryManagerController
        __Event Handlers__
        ~ addItem(ActionEvent event): void
        ~ removeItem(ActionEvent event): void
        ~ newInv(ActionEvent event): void
        ~ openInv(ActionEvent event): void
        ~ saveInv(ActionEvent event): void
        ~ saveAsInv(ActionEvent event): void
        ~ deleteInv(ActionEvent event): void
        ~ updateFilter(ActionEvent event): void
        ~ onExit(ActionEvent event): void
        __Private Implementation__
        - showNotification(Node node, String message): void
        - setDirectory(): void
        - getDefaultDirectory(): File
        - clearAddFields(): void
        - confirmIfNotSaved(): void
        - showOpenFileChooser(): File
        - showSaveFileChooser(): File
        - selectAndFocus(TextField textField): void
        - isDoubleValue(String str): boolean
        - onExitRequest(): void
    }

    class InventoryManagerModel {
        - itemMap : ObservableMap<String,Item>
        - itemList : ObservableList<Item>
        - filteredItemList : FilteredList<Item>
        - sortedItemList : SortedList<Item>

        - dataAccessObject : InventoryDAO

        + InventoryManagerModel(): InventoryManagerModel

        + getSortedList(): SortedList<Item>
        + addItem(Item item): void
        + deleteItem(Item item): void
        + loadInventory(): void
        + saveInventory(): void
        + deleteInventory(): void
        + closeInventory(): void
        + containsSerialNumber(String serialNumber): boolean
        + updateSerialNumber(String oldSerialNumber, String newSerialNumber): void
        + getItemBySerialNumber(String serialNumber): Item
        + bindFile(Path path): void
        + unbind(): void
        + isBound(): boolean
    }

    class Item {
        - name : StringProperty
        - serialNumber : StringProperty
        - value : ObjectProperty<BigDecimal>

        + Item(String name, String serialNumber, double value): Item
        + Item(String name, String serialNumber, BigDecimal value): Item

        + nameProperty(): StringProperty
        + setName(String value): void
        + getName(): String

        + serialNumberProperty(): StringProperty
        + setSerialNumber(String value): void
        + getSerialNumber(): String

        + valueProperty(): ObjectProperty<BigDecimal>
        + setValue(BigDecimal value): void
        + getValue(): BigDecimal

        + hashCode(): int
        + equals(Object Obj): boolean
        + toString(): String
        - validate(String name, String serialNumber, BigDecimal value): boolean
        + extractor(): Callback<Item, Observable[]>
    }

    interface InventoryDAO {
        + create(): void
        + getItems(): Collection<? extends Item>
        + saveItems(Collection<? extends Item> items): void
        + delete(): void
    }

    class InventoryFileDAO {
        - path : Path
        - serializer : Serializer

        + InventoryFileDAO(Path path): InventoryDAO

        + create(): void
        + getItems(): Collection<? extends Item>
        + saveItems(Collection<? extends Item> items): void
        + delete(): void

        - determineFileExtension(Path path): <? extends Serializer>
    }

    interface Serializer {
        + from(String items): Collection<? extends Item>
        + to(Collection<? extends Item> items): String
    }

    class InventoryJSONSerializer {
        + from(String items): Collection<? extends Item>
        + to(Collection<? extends Item> items): String
    }

    class InventoryHTMLSerializer {
        + from(String items): Collection<? extends Item>
        + to(Collection<? extends Item> items): String
    }

    class InventoryTSVSerializer {
        + from(String items): Collection<? extends Item>
        + to(Collection<? extends Item> items): String
    }

}

InventoryManager - InventoryManagerController
InventoryManagerController *-- InventoryManagerModel
InventoryManagerModel *-- InventoryDAO
Item -* InventoryManagerModel
InventoryFileDAO *- Serializer
Serializer <|.. InventoryJSONSerializer
Serializer <|.. InventoryHTMLSerializer
Serializer <|.. InventoryTSVSerializer
InventoryDAO <|.. InventoryFileDAO
Item .. InventoryDAO

@enduml